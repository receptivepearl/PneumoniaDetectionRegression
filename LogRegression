#use training data from imports
X_train, y_train = get_train_data()
X_test, y_test   = get_test_data()

#build cnn classifier, neural network that passes image through 3 layers
cnn = CNNClassifier(num_hidden_layers = 2)
cnn_history = cnn.fit(X_train, y_train, epochs = 150, validation_data = (X_test, y_test), shuffle = True, callbacks = [monitor])
cnn_score = cnn.evaluate(X_test, y_test)
print(cnn_score)
plot_acc(cnn_history)
X_field,y_field=get_field_data()
predictions=(cnn.predict(X_field) > 0.5)
print(accuracy_score(y_field,predictions))
x=0

#accuracy before data augmentation
for i in range(5):
  cnn = CNNClassifier(num_hidden_layers = 5)
  cnn_history = cnn.fit(X_train, y_train)
  predictions=(cnn.predict(X_field) > 0.5)
  x+=accuracy_score(y_field,predictions)
for i in range(10):
  plot_one_image(X_train, y_train, i)
  plot_one_image(X_field, y_field, i)

#data augmentation
train_data_rotated_180 = rotate(X_train, rotate=180)
train_data_rotated_270 = rotate(X_train, rotate=270)
red_train  = remove_color(remove_color(X_train, channel = 1), channel = 2)
all_data, all_labels = combine_data([train_data_rotated_270, train_data_rotated_180,red_train,X_train], [y_train,y_train,y_train,y_train])
X_train, y_train = get_train_data()
X_test, y_test   = get_test_data()
X_field, y_field   = get_field_data()

#accuracy after data augmentation
x=0
for i in range(5):
  cnn = CNNClassifier(2)
  cnn.fit(all_data, all_labels, epochs = 20, validation_data = (X_test, y_test), shuffle = True, callbacks = [monitor])
  predictions = (cnn.predict(X_field) > 0.5)
  accuracy = accuracy_score(y_field, predictions)
  print('Accuracy:%0.2f'%accuracy)
  x += accuracy

print(x/5)
